--- a/original_file.c
+++ b/modified_file.c
@@ -2,6 +2,7 @@
 {
   int i, j, k, m, ix, iy, iz;
   double xi, eta, zeta, Pface[2][3][5], Pxi, Peta, Pzeta, temp[5];
+#pragma omp parallel for collapse(3) private(i, j, k, m)
   for (i = 0; i < IMAX; i++) {
     for (j = 0; j < IMAX; j++) {
       for (k = 0; k < IMAX; k++) {
@@ -13,6 +14,7 @@
     }
   }
   for (i = 0; i < grid_points[0]; i++) {
+#pragma omp parallel for collapse(3) private(i, j, k, ix, iy, iz, m, xi, eta, zeta, Pxi, Peta, Pzeta, Pface)
     xi = (double)i * dnxm1;
     for (j = 0; j < grid_points[1]; j++) {
       eta = (double)j * dnym1;
@@ -48,6 +50,7 @@
   i = 0;
   xi = 0.0;
   for (j = 0; j < grid_points[1]; j++) {
+#pragma omp parallel for private(j, k, m, eta, zeta, temp)
     eta = (double)j * dnym1;
     for (k = 0; k < grid_points[2]; k++) {
       zeta = (double)k * dnzm1;
@@ -60,6 +63,7 @@
   i = grid_points[0]-1;
   xi = 1.0;
   for (j = 0; j < grid_points[1]; j++) {
+#pragma omp parallel for private(j, k, m, eta, zeta, temp)
     eta = (double)j * dnym1;
     for (k = 0; k < grid_points[2]; k++) {
       zeta = (double)k * dnzm1;
@@ -72,6 +76,7 @@
   j = 0;
   eta = 0.0;
   for (i = 0; i < grid_points[0]; i++) {
+#pragma omp parallel for private(i, k, m, xi, zeta, temp)
     xi = (double)i * dnxm1;
     for (k = 0; k < grid_points[2]; k++) {
       zeta = (double)k * dnzm1;
@@ -84,6 +89,7 @@
   j = grid_points[1]-1;
   eta = 1.0;
   for (i = 0; i < grid_points[0]; i++) {
+#pragma omp parallel for private(i, k, m, xi, zeta, temp)
     xi = (double)i * dnxm1;
     for (k = 0; k < grid_points[2]; k++) {
       zeta = (double)k * dnzm1;
@@ -96,6 +102,7 @@
   k = 0;
   zeta = 0.0;
   for (i = 0; i < grid_points[0]; i++) {
+#pragma omp parallel for private(i, j, m, xi, eta, temp)
     xi = (double)i *dnxm1;
     for (j = 0; j < grid_points[1]; j++) {
       eta = (double)j * dnym1;
@@ -108,6 +115,7 @@
   k = grid_points[2]-1;
   zeta = 1.0;
   for (i = 0; i < grid_points[0]; i++) {
+#pragma omp parallel for private(i, j, m, xi, eta, temp)
     xi = (double)i * dnxm1;
     for (j = 0; j < grid_points[1]; j++) {
       eta = (double)j * dnym1;