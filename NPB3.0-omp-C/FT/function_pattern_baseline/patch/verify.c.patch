--- a/original_code.c
+++ b/modified_code.c
@@ -135,16 +135,18 @@
 	d3 == 64 &&
 	nt == 6) {
 	*class = 'S';
+	boolean class_failed = FALSE; // Local flag for this class check
+#pragma omp parallel for private(i, err) shared(epsilon, vdata_real_s, vdata_imag_s, sums, class_failed)
 	for (i = 1; i <= nt; i++) {
             err = (get_real(sums[i]) - vdata_real_s[i]) / vdata_real_s[i];
             if (fabs(err) > epsilon) {
-	      *verified = FALSE;
-	      break;
+                #pragma omp atomic write
+                class_failed = TRUE;
 	    }
             err = (get_imag(sums[i]) - vdata_imag_s[i]) / vdata_imag_s[i];
             if (fabs(err) > epsilon) {
-	      *verified = FALSE;
-	      break;
+                #pragma omp atomic write
+                class_failed = TRUE;
 	    }
 	}
     } else if (d1 == 128 &&
@@ -156,16 +158,18 @@
 	       d3 == 32 &&
 	       nt == 6) {
 	*class = 'W';
-	for (i = 1; i <= nt; i++) {
+	boolean class_failed = FALSE; // Local flag for this class check
+#pragma omp parallel for private(i, err) shared(epsilon, vdata_real_w, vdata_imag_w, sums, class_failed)
+	for (i = 1; i <= nt; i++) {
             err = (get_real(sums[i]) - vdata_real_w[i]) / vdata_real_w[i];
             if (fabs(err) > epsilon) {
-	      *verified = FALSE;
-	      break;
+                #pragma omp atomic write
+                class_failed = TRUE;
 	    }
             err = (get_imag(sums[i]) - vdata_imag_w[i]) / vdata_imag_w[i];
             if (fabs(err) > epsilon) {
-	      *verified = FALSE;
-	      break;
+                #pragma omp atomic write
+                class_failed = TRUE;
 	    }
 	}
     } else if (d1 == 256 &&
@@ -177,16 +181,18 @@
 	       d3 == 128 &&
 	       nt == 6) {
 	*class = 'A';
-	for (i = 1; i <= nt; i++) {
+	boolean class_failed = FALSE; // Local flag for this class check
+#pragma omp parallel for private(i, err) shared(epsilon, vdata_real_a, vdata_imag_a, sums, class_failed)
+	for (i = 1; i <= nt; i++) {
             err = (get_real(sums[i]) - vdata_real_a[i]) / vdata_real_a[i];
             if (fabs(err) > epsilon) {
-	      *verified = FALSE;
-	      break;
+                #pragma omp atomic write
+                class_failed = TRUE;
 	    }
             err = (get_imag(sums[i]) - vdata_imag_a[i]) / vdata_imag_a[i];
             if (fabs(err) > epsilon) {
-	      *verified = FALSE;
-	      break;
+                #pragma omp atomic write
+                class_failed = TRUE;
 	    }
 	}
     } else if (d1 == 512 &&
@@ -198,16 +204,18 @@
 	       d3 == 256 &&
 	       nt == 20) {
 	*class = 'B';
-	for (i = 1; i <= nt; i++) {
+	boolean class_failed = FALSE; // Local flag for this class check
+#pragma omp parallel for private(i, err) shared(epsilon, vdata_real_b, vdata_imag_b, sums, class_failed)
+	for (i = 1; i <= nt; i++) {
             err = (get_real(sums[i]) - vdata_real_b[i]) / vdata_real_b[i];
             if (fabs(err) > epsilon) {
-	      *verified = FALSE;
-	      break;
+                #pragma omp atomic write
+                class_failed = TRUE;
 	    }
             err = (get_imag(sums[i]) - vdata_imag_b[i]) / vdata_imag_b[i];
             if (fabs(err) > epsilon) {
-	      *verified = FALSE;
-	      break;
+                #pragma omp atomic write
+                class_failed = TRUE;
 	    }
 	}
     } else if (d1 == 512 &&
@@ -219,16 +227,18 @@
 	       d3 == 512 &&
 	       nt == 20) {
 	*class = 'C';
-	for (i = 1; i <= nt; i++) {
+	boolean class_failed = FALSE; // Local flag for this class check
+#pragma omp parallel for private(i, err) shared(epsilon, vdata_real_c, vdata_imag_c, sums, class_failed)
+	for (i = 1; i <= nt; i++) {
             err = (get_real(sums[i]) - vdata_real_c[i]) / vdata_real_c[i];
             if (fabs(err) > epsilon) {
-	      *verified = FALSE;
-	      break;
+                #pragma omp atomic write
+                class_failed = TRUE;
 	    }
             err = (get_imag(sums[i]) - vdata_imag_c[i]) / vdata_imag_c[i];
             if (fabs(err) > epsilon) {
-	      *verified = FALSE;
-	      break;
+                #pragma omp atomic write
+                class_failed = TRUE;
 	    }
 	}
     }