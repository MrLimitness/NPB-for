--- a/exact_rhs.c
+++ b/exact_rhs.c
@@ -1,9 +1,11 @@
 static void exact_rhs(void) {
+#include <omp.h>
   double dtemp[5], xi, eta, zeta, dtpp;
   int m, i, j, k, ip1, im1, jp1, jm1, km1, kp1;
+
+#pragma omp parallel for collapse(3)
   for (m = 0; m < 5; m++) {
-    for (i = 0; i <= grid_points[0]-1; i++) {
-      for (j = 0; j <= grid_points[1]-1; j++) {
-	for (k= 0; k <= grid_points[2]-1; k++) {
+    for (i = 0; i <= grid_points[0]-1; i++) {      for (j = 0; j <= grid_points[1]-1; j++) {
+	for (k= 0; k <= grid_points[2]-1; k++) {
 	  forcing[m][i][j][k] = 0.0;
 	}
       }
@@ -11,6 +13,8 @@
     }
   }
   for (k = 1; k <= grid_points[2]-2; k++) {
+#pragma omp parallel for private(j, eta, i, xi, dtemp, m, dtpp, ip1, im1, ue, buf, cuf, q) default(none) \
+  shared(grid_points, dnxm1, dnym1, dnzm1, exact_solution, forcing, tx2, dx1tx1, c2, xxcon1, dx2tx1, xxcon2, dx3tx1, dx4tx1, c1, xxcon3, xxcon4, xxcon5, dx5tx1, dssp)
     zeta = (double)k * dnzm1;
     for (j = 1; j <= grid_points[1]-2; j++) {
       eta = (double)j * dnym1;
@@ -86,6 +90,8 @@
       }
     }
   }
+#pragma omp parallel for private(i, xi, j, eta, dtemp, m, dtpp, jp1, jm1, ue, buf, cuf, q) default(none) \
+  shared(grid_points, dnxm1, dnym1, dnzm1, exact_solution, forcing, ty2, dy1ty1, c2, yycon2, dy2ty1, yycon1, dy3ty1, dy4ty1, c1, yycon3, yycon4, yycon5, dy5ty1, dssp)
   for (k = 1; k <= grid_points[2]-2; k++) {
     zeta = (double)k * dnzm1;
     for (i = 1; i <= grid_points[0]-2; i++) {
@@ -161,6 +167,8 @@
       }
     }
   }
+#pragma omp parallel for private(i, xi, k, zeta, dtemp, m, dtpp, kp1, km1, ue, buf, cuf, q) default(none) \
+  shared(grid_points, dnxm1, dnym1, dnzm1, exact_solution, forcing, tz2, dz1tz1, c2, zzcon2, dz2tz1, zzcon2, dz3tz1, zzcon1, dz4tz1, c1, zzcon3, zzcon4, zzcon5, dz5tz1, dssp)
   for (j = 1; j <= grid_points[1]-2; j++) {
     eta = (double)j * dnym1;
     for (i = 1; i <= grid_points[0]-2; i++) {
@@ -236,6 +244,7 @@
       }
     }
   }
+#pragma omp parallel for collapse(3)
   for (m = 0; m < 5; m++) {
     for (i = 1; i <= grid_points[0]-2; i++) {
       for (j = 1; j <= grid_points[1]-2; j++) {