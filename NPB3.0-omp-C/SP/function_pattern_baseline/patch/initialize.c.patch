--- a/original_file.c
+++ b/modified_file.c
@@ -3,6 +3,7 @@
 static void initialize(void) {
   int i, j, k, m, ix, iy, iz;
   double xi, eta, zeta, Pface[2][3][5], Pxi, Peta, Pzeta, temp[5];
+#pragma omp parallel for private(i, j, k, m)
   for (i = 0; i <= IMAX-1; i++) {
     for (j = 0; j <= IMAX-1; j++) {
       for (k = 0; k <= IMAX-1; k++) {
@@ -14,6 +15,7 @@
       }
     }
   }
+#pragma omp parallel for private(i, j, k, m, ix, iy, iz, xi, eta, zeta, Pface, Pxi, Peta, Pzeta)
   for (i = 0; i <= grid_points[0]-1; i++) {
     xi = (double)i * dnxm1;
     for (j = 0; j <= grid_points[1]-1; j++) {
@@ -48,6 +50,7 @@
   }
   xi = 0.0;
   i  = 0;
+#pragma omp parallel for private(j, k, m, eta, zeta, temp)
   for (j = 0; j < grid_points[1]; j++) {
     eta = (double)j * dnym1;
     for (k = 0; k < grid_points[2]; k++) {
@@ -60,6 +63,7 @@
   }
   xi = 1.0;
   i  = grid_points[0]-1;
+#pragma omp parallel for private(j, k, m, eta, zeta, temp)
   for (j = 0; j < grid_points[1]; j++) {
     eta = (double)j * dnym1;
     for (k = 0; k < grid_points[2]; k++) {
@@ -72,6 +76,7 @@
   }
   eta = 0.0;
   j   = 0;
+#pragma omp parallel for private(i, k, m, xi, zeta, temp)
   for (i = 0; i < grid_points[0]; i++) {
     xi = (double)i * dnxm1;
     for (k = 0; k < grid_points[2]; k++) {
@@ -84,6 +89,7 @@
   }
   eta = 1.0;
   j   = grid_points[1]-1;
+#pragma omp parallel for private(i, k, m, xi, zeta, temp)
   for (i = 0; i < grid_points[0]; i++) {
     xi = (double)i * dnxm1;
     for (k = 0; k < grid_points[2]; k++) {
@@ -96,6 +102,7 @@
   }
   zeta = 0.0;
   k    = 0;
+#pragma omp parallel for private(i, j, m, xi, eta, temp)
   for (i = 0; i < grid_points[0]; i++) {
     xi = (double)i *dnxm1;
     for (j = 0; j < grid_points[1]; j++) {
@@ -108,6 +115,7 @@
   }
   zeta = 1.0;
   k    = grid_points[2]-1;
+#pragma omp parallel for private(i, j, m, xi, eta, temp)
   for (i = 0; i < grid_points[0]; i++) {
     xi = (double)i * dnxm1;
     for (j = 0; j < grid_points[1]; j++) {